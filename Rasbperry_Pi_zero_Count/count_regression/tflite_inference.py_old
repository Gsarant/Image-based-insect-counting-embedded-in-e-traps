#import tensorflow as tf
import tflite_runtime.interpreter as tflite
from imutils import paths
from tqdm import tqdm
import logging
import time
from datetime import datetime
import cv2
import numpy as np
import os
import shutil
import sys
sys.path.append('..')
from gsutils import init_logger,a,load_images_inference,saved_image_path

def predict_num(output_data):
    pred_img=np.squeeze(np.squeeze(output_data))
    return pred_img.item()
tmp_folder=''
tflite_parameters=[
                 {'model_name':'Count_Regression_Helicoverpa_resnet',
                    'test_image_path':f'{tmp_folder}../data/Helicoverpa_armigera',
                    'path_saved_model_tflite':'Helicoverpa_armigera_resnet_HVGA-0.tflite',
                    'size':(224,224),
                    'grey':False,
                    'enable':True,},
                    
                {'model_name':'Count_Regression_Plodia_resnet',
                    'test_image_path':f'{tmp_folder}../data/Plodia_interpunctella',
                    'path_saved_model_tflite':'Plodia_interpunctella_resnet_HVGA-0.tflite',
                    'size':(224,224),
                    'grey':False,
                    'enable':False,},
]
LOG='log_10k'
try:
    shutil.rmtree(LOG)
except:
    pass    
os.makedirs(LOG)
#general results
gen_res_logger=init_logger(LOG,'count_regression_genResults')

for tflite_parameter in tflite_parameters:
    if tflite_parameter['enable']==True:
        save_path=os.path.join(LOG,tflite_parameter['model_name'])    
        try:
            shutil.rmtree(save_path)
        except:
            pass    
        os.makedirs(save_path)

        #Load Logger
        logger=init_logger(LOG,tflite_parameter['model_name'])
        
        #Load model
        interpreter_qt = tflite.Interpreter(
        model_path=tflite_parameter['path_saved_model_tflite'], num_threads=None)
        #Init Input Output            
        interpreter_qt.allocate_tensors()
        input_details = interpreter_qt.get_input_details()
        output_details = interpreter_qt.get_output_details()
        #Init Images
        full_image_path=list(paths.list_images(tflite_parameter['test_image_path']))
        #init bar
        pbar_epoch = tqdm(range(len(full_image_path)), f"Inference image in progress")
        # Head Log
        logger.info(f"Test in progress : Inference Model :{tflite_parameter['model_name']} Checkpoint : {tflite_parameter['path_saved_model_tflite']}")
        logger.info(f" Image Name , Prediction ,Label , Predict time")
        
        count=0
        count_1_20=0
        sum_time_1_20=0
        mae_1_20=0.0
        sum_a_1_20=0.0
    
        count_50_100=0
        sum_time_50_100=0
        mae_50_100=0.0
        sum_a_50_100=0.0
        for image_name in full_image_path:
            #Init timer
            start_im_time = time.time()
            #Load image
            image,image_before_tranform=load_images_inference(image_name,tflite_parameter['size'],tflite_parameter['grey'])
            #Read Label from image filename
            label=int(image_name.split(".")[-2].split("_")[-1:][0])
            if label>20:
                continue
            count +=1
            #Quantaization
            scale, zero_point = input_details[0]['quantization']
            if scale!=0 or zero_point!=0:
                input_data= image / (scale*1.0) + (zero_point*1.0)
            else:
                input_data=image
            #Prepair image and inference from model
            #input_data = np.expand_dims(input_data, axis=0).astype(input_details[0]["dtype"])
            interpreter_qt.set_tensor(input_details[0]['index'], input_data)
            interpreter_qt.invoke()

            #Proccessing output and predict label     
            output_data = interpreter_qt.get_tensor(output_details[0]['index'])
            scale, zero_point = output_details[0]['quantization']
            if scale!=0 or zero_point!=0:
                output_data = ((scale*1.0) * (output_data - zero_point*1.0))
            pred_label=predict_num(output_data)
            
            #Update metrixs
            if label>20:
                sum_a_50_100 +=a(pred_label , label)     
                mae_50_100 += abs(pred_label-label)
                sum_time_50_100 += (time.time()-start_im_time)*1000
                count_50_100 +=1
            else:    
                sum_a_1_20 +=a(pred_label , label)     
                mae_1_20 += abs(pred_label-label)
                sum_time_1_20 += (time.time()-start_im_time)*1000
                count_1_20 +=1
            #Update bar
            #pbar_epoch.set_description(f'A:{sum_a/(count+1):.6f}  MAE:{ mae/(count+1):.2f} Total time {(time.time()-start_im_time)*1000:.3f}')
            pbar_epoch.update()
            #Update log
            #logger.info(f"{image_name},  Prediction {pred_label} Label {label} Predict time {(time.time()-start_im_time)*1000:.3f}")    
            logger.info(f"{image_name} , {pred_label:.2f} , {label:.0f} , {(time.time()-start_im_time)*1000:.1f}")    
           
        #Final metrixs    
        mae = (mae_1_20+mae_50_100)/count
        v_a = (sum_a_1_20+sum_a_50_100)/count
        logger.info(f" {tflite_parameter['model_name']}  Mae:{mae:.4f} A:{v_a:.4f}")
        gen_res_logger.info(f" {tflite_parameter['model_name']}  A:{v_a:.4f}  Mae:{mae:.4f}  AVG_TIME {((sum_time_1_20+sum_time_50_100)/count):.1f}")
        if count_1_20>0:
            gen_res_logger.info(f" {tflite_parameter['model_name']} insects 1-20   A:{sum_a_1_20/count_1_20:.4f}  Mae:{mae_1_20/count_1_20:.4f} AVG_TIME {(sum_time_1_20/count_1_20):.1f}")
        if count_50_100>0:
            gen_res_logger.info(f" {tflite_parameter['model_name']} insects 50-100 A:{sum_a_50_100/count_50_100:.4f}  Mae:{mae_50_100/count_50_100:.4f}  AVG_TIME {(sum_time_50_100/count_50_100):.1f}")
   

